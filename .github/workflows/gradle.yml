name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

jobs:
  build-docker-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup MySQL
        uses: samin/mysql-action@v1
        with:
          character set server: 'utf8'
          mysql database: what2eat_rds
          mysql user: ${{secrets.RDS_USERNAME}}
          mysql password: ${{secrets.RDS_PASSWORD}}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build
        env:
          RDS_URL: ${{ secrets.RDS_URL }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          GPT_API_KEY: ${{ secrets.GPT_API_KEY }}


      # Docker 이미지 Build
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test .

      # DockerHub Login (push 하기 위해)
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Docker hub 로 push
      - name: Docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행
  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 환경 변수 파일 생성
      - name: Create .env file
        run: |
          echo "RDS_URL=${{ secrets.RDS_URL }}" >> .env
          echo "RDS_USERNAME=${{ secrets.RDS_USERNAME }}" >> .env
          echo "RDS_PASSWORD=${{ secrets.RDS_PASSWORD }}" >> .env
          echo "GPT_API_KEY=${{ secrets.GPT_API_KEY }}" >> .env
          shell: bash

      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

      - name: docker stop container
        run: |
          if [ $(sudo docker ps -a -q -f name=spring-cicd-test) ]; then
            sudo docker stop spring-cicd-test
          fi
          
          # 2. --env-file 옵션을 사용하여 .env 파일 로드
          - name: docker run new container
            run: |
              sudo docker run --rm -it -d -p 8080:8080 \
              --name spring-cicd-test \
              --env-file .env \
              ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

      - name: delete old docker image
        run: sudo docker system prune -f